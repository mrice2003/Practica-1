def is_reflexive(relation_set):
    elements = {x for pair in relation_set for x in pair}
    return all((x, x) in relation_set for x in elements)

def is_symmetric(relation_set):
    return all((y, x) in relation_set for x, y in relation_set)

def is_transitive(relation_set):
    return all((a, c) in relation_set for a, b in relation_set for x, c in relation_set if b == x)

def classify_relation(relation_set):
    reflexive = is_reflexive(relation_set)
    symmetric = is_symmetric(relation_set)
    transitive = is_transitive(relation_set)

    if reflexive:
        print("(a) R is reflexive")
    else:
        print("(a) R is not reflexive")

    if symmetric:
        print("(b) R is symmetric")
    else:
        print("(b) R is not symmetric")

    if transitive:
        print("(c) R is transitive")
    else:
        print("(c) R is not transitive")

    if reflexive and symmetric and transitive:
        print("(d) R has an equivalence relation")
    else:
        print("(d) R does not have an equivalence relation")

    generate_graph_output(relation_set)

def generate_graph_output(relation_set):
    print("digraph example {\n\trankdir=LR;\n\tnode [shape = circle];")

    for pair in relation_set:
        print(f"\t{pair[0]} -> {pair[1]} ;")

    print("}")

input_relation = {(0, 0), (0, 1), (0, 3), (1, 0), (1, 1), (2, 2), (3, 0), (3, 3)}
classify_relation(input_relation)
